if (success == 0) {
        /* Rimuove l'elemento anche dalla coda FIFO */
        int succ_fifo = remove(name_file); 
        CHECK_OPERATION(succ_fifo == -1, 
            fprintf(stderr, "Errore nell'eliminazione di un elemento nella coda FIFO.\n"); 
                return -1);
    }

if (success == 0) {
            /* Aggiunge l'elemento in coda alla lista FIFO */
            int succ_fifo = add_fifo(name_file); 
            CHECK_OPERATION(succ_fifo == -1, 
                fprintf(stderr, "Errore nell'inserimento di un elemento nella coda FIFO.\n"); 
                    return -1);
        }




int add(list_t **lista_trabocco, char* name_file, int flags){
    CHECK_OPERATION(name_file == NULL || (*lista_trabocco) == NULL,
        fprintf(stderr, "Parametri non validi.\n");
            return -1);
   
        /* Crea il nodo da aggiungere */
        node *curr = (node*)malloc(sizeof(node));
        CHECK_OPERATION(curr == NULL,
            fprintf(stderr, "Allocazione non andata a buon fine.\n");
                return -1);
        curr->path = malloc(sizeof(char)*(strlen(name_file)+1));
        strcpy((char*)curr->path, name_file);
        int m_init = pthread_mutex_init(curr->mutex, NULL);
        CHECK_OPERATION(m_init =
int add(list_t **lista_trabocco, char* name_file, int flags){
    CHECK_OPERATION(name_file == NULL || (*lista_trabocco) == NULL,
        fprintf(stderr, "Parametri non validi.\n");
            return -1);
   
        /* Crea il nodo da aggiungere */
        node *curr = (node*)malloc(sizeof(node));
        CHECK_OPERATION(curr == NULL,
            fprintf(stderr, "Allocazione non andata a buon fine.\n");
                return -1);
        curr->path = malloc(sizeof(char)*(strlen(name_file)+1));
        strcpy((char*)curr->path, name_file);
        int m_init = pthread_mutex_init(curr->mutex, NULL);
        CHECK_OPERATION(m_init == -1,
            fprintf(stderr, "Errore nella inizializzazione della mutex.\n");
                return -1);
        curr->open = 0;
        curr->buffer = NULL;

        pthread_mutex_lock((*lista_trabocco)->mutex);

        /* Aggiunge il nodo in testa alla lista di trabocco*/
        curr->next = (*lista_trabocco)->head; 
        (*lista_trabocco)->head = curr;

        if(flags == 4){
            /* Setta la mutex */
            int err_set = set_mutex(curr);
            CHECK_OPERATION(err_set==-1,
                fprintf(stderr, "Errore nel setaggio della mutex");
                    return -1);
        }

        pthread_mutex_unlock((*lista_trabocco)->mutex);

    return 0;
}

node* delete(list_t **lista_trabocco, char* name_file){
    CHECK_OPERATION(!*lista_trabocco || !name_file,
        fprintf(stderr, "Parametri non validi.\n");
            return -1);

    node* curr, *prev;
    curr = (*lista_trabocco)->head;
    if (strcmp(curr->path, name_file) == 0){

        pthread_mutex_lock((*lista_trabocco)->mutex);
        (*lista_trabocco)->head = curr->next; 
        pthread_mutex_unlock((*lista_trabocco)->mutex);
        
        return curr;
    }

    prev = curr;
    curr = curr->next;
    while (curr != NULL) {
        if (strcmp(curr->path, name_file) == 0){

            pthread_mutex_lock((*lista_trabocco)->mutex);
            prev->next = curr->next; 
            pthread_mutex_unlock((*lista_trabocco)->mutex);

            return curr;
        }
        prev = curr;
        curr = curr->next;
    }

    return NULL;
}

node* look_for_node(char* name_file){
    CHECK_OPERATION(name_file == NULL, 
        fprintf(stderr, "Parametro non valido.\n");
            return -1);

    int hash = hash_function(name_file); //TODO:CREA
    node* curr;
    //TODO: metti in lock da qui
    for (curr=table->queue[hash]; curr != NULL; curr=curr->next)
        if (strcmp(curr->path, name_file) == 0)
            return(curr);

    return NULL;
}


int caller_open(const char* pathname){
    int err;
    if(is_directory(pathname)){
        DIR *dir = opendir(pathname);
        CHECK_OPERATION(dir == NULL, fprintf(stderr, "Errore sulla opendir.\n"); return -1;);
        
        struct dirent *file;
        while((errno=0, file = readdir(dir))!=NULL && pathname != NULL){
            int len = strlen(pathname) + strlen(file->d_name) + strlen("/") + 1;
            const char *path = malloc(sizeof(char)*len);
            path = strcpy((char*)path, pathname);
            path = strcat((char*)path, "/");
            path = strcat((char*)path, file->d_name);

            if(strcmp(file->d_name, "..")!=0 && strcmp(file->d_name, ".")!=0){
                if(is_regular_file(path)){
                    err = openFile(path, O_CREATE | O_LOCK);
                    CHECK_OPERATION(err == -1, fprintf(stderr, "Errore nella chiamata a openFile.\n"); 
                        free((char*)path);
                            int check = closedir(dir);
                                CHECK_OPERATION(check == -1, fprintf(stderr, "Errore nella closedir.\n"); return -1);
                                    return -1;);
                } else if(is_directory(path)){
                    int result = caller_open(path);
                    CHECK_OPERATION(result == -1, fprintf(stderr, "Errore nella caller.\n"); 
                        free((char*)path);
                            int check = closedir(dir);
                                CHECK_OPERATION(check == -1, fprintf(stderr, "Errore nella closedir.\n"); return -1);
                                    return -1;);
                }
            }
            free((char*)path);
        }
        int check = closedir(dir);
        CHECK_OPERATION(check == -1, fprintf(stderr, " errore nella closedir.\n"); return -1);
    } else if(is_regular_file(pathname)){
        /* Gestisce la richiesta */
        err = openFile(pathname, O_CREATE | O_LOCK);
        CHECK_OPERATION(err == -1, fprintf(stderr, " errore nella chiamata a openFile(pathname).\n"); return -1;);
    }
    return 0;
}

int caller_write(const char* pathname, const char *dirname){
    int err;
    if(is_directory(pathname)){
        DIR *dir = opendir(pathname);
        CHECK_OPERATION(dir == NULL, fprintf(stderr, "Errore sulla opendir.\n"); return -1;);
        
        struct dirent *file;
        while((errno=0, file = readdir(dir))!=NULL && pathname != NULL){
            int len = strlen(pathname) + strlen(file->d_name) + strlen("/") + 1;
            const char *path = malloc(sizeof(char)*len);
            path = strcpy((char*)path, pathname);
            path = strcat((char*)path, "/");
            path = strcat((char*)path, file->d_name);

            if(strcmp(file->d_name, "..")!=0 && strcmp(file->d_name, ".")!=0){
                if(is_regular_file(path)){
                    err = writeFile(path, dirname);
                    CHECK_OPERATION(err == -1, fprintf(stderr, "Errore nella chiamata a writeFile.\n"); 
                        free((char*)path);
                            int check = closedir(dir);
                                CHECK_OPERATION(check == -1, fprintf(stderr, "Errore nella closedir.\n"); return -1);
                                    return -1;);
                } else if(is_directory(path)){
                    int result = caller_open(path);
                    CHECK_OPERATION(result == -1, fprintf(stderr, "Errore nella caller.\n"); 
                        free((char*)path);
                            int check = closedir(dir);
                                CHECK_OPERATION(check == -1, fprintf(stderr, "Errore nella closedir.\n"); return -1);
                                    return -1;);
                }
            }
            free((char*)path);
        }
        int check = closedir(dir);
        CHECK_OPERATION(check == -1, fprintf(stderr, "Errore nella closedir.\n"); return -1);
    } else if(is_regular_file(pathname)){
        /* Gestisce la richiesta */
        err = writeFile(pathname, dirname);
        CHECK_OPERATION(err == -1, fprintf(stderr, "Errore nella chiamata a writeFile.\n"); return -1;);
    }
    return 0;
}
push_queue((char*)argv[1], &(pool->pending_requests));
    push_queue((char*)argv[2], &(pool->pending_requests)); 