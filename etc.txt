int caller(int (*fun) (const char*), const char* pathname){ //TODO: testa
    int err;
    if(is_directory(pathname)){
        DIR *dir = opendir(pathname);
        CHECK_OPERATION(dir == NULL, fprintf(stderr, " errore sulla opendir.\n"); return -1;);
        
        struct dirent *file;
        while((errno=0, file = readdir(dir))!=NULL && pathname != NULL){
            int len = strlen(pathname) + strlen(file->d_name) + strlen("/") + 1;
            const char *path = malloc(sizeof(char)*len);
            path = strcpy((char*)path, pathname);
            path = strcat((char*)path, "/");
            path = strcat((char*)path, file->d_name);

            if(strcmp(file->d_name, "..")!=0 && strcmp(file->d_name, ".")!=0){
                if(is_regular_file(path)){
                    err = fun(pathname);
                    CHECK_OPERATION(err == -1, fprintf(stderr, " errore nella chiamata a fun(pathname).\n"); 
                        free((char*)path);
                            int check = closedir(dir);
                                CHECK_OPERATION(check == -1, fprintf(stderr, " errore nella closedir.\n"); return -1);
                                    return -1;);
                } else if(is_directory(path)){
                    int result = caller(fun, path);
                    CHECK_OPERATION(result == -1, fprintf(stderr, " errore nella caller.\n"); 
                        free((char*)path);
                            int check = closedir(dir);
                                CHECK_OPERATION(check == -1, fprintf(stderr, " errore nella closedir.\n"); return -1);
                                    return -1;);
                }
            }
            free((char*)path);
        }
        int check = closedir(dir);
        CHECK_OPERATION(check == -1, fprintf(stderr, " errore nella closedir.\n"); return -1);
    } else if(is_regular_file(pathname)){
        /* Gestisce la richiesta */
        err = fun(pathname);
        CHECK_OPERATION(err == -1, fprintf(stderr, " errore nella chiamata a fun(pathname).\n"); return -1);

    }

    return 0;
}

/**
 * @brief Chiama ricorsivamente la funziona fun sui file contenuti in pathname
 * 
 * @param fun Funzione da chiamate
 * @param pathname Path assoluto della directory
 * @return int 0 in caso di successo, -1 altrimenti
 */
int caller(int (*fun) (const char*), const char* pathname);